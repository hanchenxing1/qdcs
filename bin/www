#!/usr/bin/env no

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('digitalsignature:server');
var http = require('http');
const {Server} = require("socket.io");


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Create Socket io listener.
 */
const socketIO = new Server(server, {
    cors: {
        origin: process.env.FRONT_END_URI,
        methods: ['GET', 'POST']
    },
    path: process.env.PREFIX_PATH + 'socket.io/'
})
// Socket io controller
require('../controllers/socketController.js')(socketIO)

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port, () => {
    console.log(`Listening on port: ${port}`);
});

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
